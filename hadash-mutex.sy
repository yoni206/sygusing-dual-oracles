(set-logic ALL)
(set-option :uf-ho true)
(set-option :lang sygus2)
;(set-option :sygus-abort-size 5)

; type S
; mutable relation f
; mutable relation u(S)
; init: f & forall X. !u(x)
; transition trans1:
;   # insert element into u, changing f from true to false
;   modifies f, u
;   f & !new(f) & exists x.forall Y. new(u(Y)) <-> (u(Y) | Y = x)
; transition trans2:
;   # remove element from u, setting f to true
;   modifies f, u
;   new(f) &  exists x. u(x) & forall Y. new(u(Y)) <-> (u(Y) & Y != x)
; invariant [safety] forall X,Y. u(X) & u(Y) -> X = Y
; invariant forall X. u(X) -> !f

(declare-sort S 0)
(declare-var f Bool)
;(declare-var u (-> S Bool))
(declare-fun u (S) Bool)
(declare-var new_f Bool)
(declare-var new_u (-> S Bool))

(define-fun init ((f Bool) (u (-> S Bool))) Bool (and f (forall ((x S)) (not (u x)))))


(define-fun trans1 ((f Bool) (u (-> S Bool)) (new_f Bool) (new_u (-> S Bool))) Bool (and f (not new_f) (exists ((x S)) (forall ((y S)) (= (new_u y) (or (u y) (= y x)))))))

(define-fun trans2 ((f Bool) (u (-> S Bool)) (new_f Bool) (new_u (-> S Bool))) Bool (and new_f (exists ((x S)) (and (u x) (forall ((y S)) (= (new_u y) (and (u y) (distinct y x))))))))

(define-fun safe ((f Bool) (u (-> S Bool))) Bool (forall ((x S) (y S)) (=> (and (u x) (u y)) (= x y))))


(synth-fun inv_matrix ((f Bool) (u (-> S Bool)) (x S) (y S)) Bool 
   ((B Bool) (SG S)) 
   (
     (B Bool (
;     (and (=> (and (u x) (u y)) (= x y)) (=> f (not (u x))))
     (or B B)
     (and B B)
     (not B) 
     f
     (u SG)
     (ite B B B)
   )) 
   (SG S (
     x
     y
   ))

))



;(define-fun inv ((f Bool) (u (-> S Bool))) Bool (and (forall ((x S)) (inv_matrix f u x)) (safe f u)))
(define-fun inv ((f Bool) (u (-> S Bool))) Bool (forall ((x S) (y S)) (inv_matrix f u x y)) )


(constraint (=> (init f u) (inv f u)))
(constraint (=> (and (inv f u) (trans1 f u new_f new_u)) (inv new_f new_u)))
(constraint (=> (and (inv f u) (trans2 f u new_f new_u)) (inv new_f new_u)))
(constraint (=> (inv f u) (safe f u)))

(check-synth)
